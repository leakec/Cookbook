#!/usr/bin/python

import yaml
import click
from typing import Optional, Dict

# Setup click
@click.command(context_settings=dict(help_option_names=["-h","--help"]))
@click.pass_context
@click.argument("yaml-file", type=str,)# help="Input yaml file that has the recipe data).")
@click.argument("output-file", type=str,)# help="Output markdown file that contains the formatted recipe..")
@click.option("--template-file", type=str, help="Recipe template file.", default="recipe_template.md")
def cli(ctx, yaml_file, output_file, **kwargs):
    kwargs['yaml_file'] = yaml_file
    kwargs['output_file'] = output_file
    return kwargs

# Get click config
cfgobj = cli(standalone_mode=False)

# Get input and output files
yamlFile = cfgobj["yaml_file"]
outputFile = cfgobj["output_file"]
templateFile = cfgobj["template_file"]

# Load the data
with open(yamlFile) as f:
    data = yaml.load(f, Loader=yaml.Loader)

# Format the data
def ingredient_formatter(i):
    s = " * [ ] {}".format(i.get("amount", ""))
    if "units" in i:
        s += " {} of".format(i["units"])
    s += " {}\n".format(i["name"])
    if "notes" in i:
        s += "    * {}\n".format(i["notes"])
    return s

# Format the time
def time_formatter(t: Dict[str, int]) -> Optional[str]:
    hh = t.get("hh","")
    mm = t.get("mm","")
    ss = t.get("ss","")
    if hh:
        if mm:
            if ss:
                time = str(hh) + " hours " + str(mm) + " minutes and " + ss + " seconds"
            else:
                time = str(hh) + " hours and " + str(mm) + " minutes"
        elif ss:
            time = str(hh) + " hours and " + str(ss) + " seconds"
        else:
            time = str(hh) + " hours"
    elif mm:
        if ss:
            time = str(mm) + " minutes and " + ss + " seconds"
        else:
            time = str(mm) + " minutes"
    elif ss:
        time = ss + " seconds"
    else:
        time = None

    return time

# Get title
title = data['title']

# Get chef
chef = data.get("chef","")
if chef:
    chef = "Chef: "+chef

# Get cook time
time = ""
timeData = data.get("time",{})
prepTime = time_formatter(timeData.get("prep", {}))
if prepTime:
    time += "Prep time: "+prepTime+"<br>"
cookTime = time_formatter(timeData.get("cook", {}))
if cookTime:
    time += "Cook time: "+cookTime

# Get ingredients
ingredients = [ingredient_formatter(i) for i in data['ingredients']]

# Get steps
steps = ["  1. {}\n".format(step) for step in data['steps']]

# Apply data to template
with open(templateFile, "r") as f:
    template = f.read()

recipe = template.format(title=title,chef=chef,time=time,ingredients=''.join(ingredients),steps=''.join(steps))

# Write recipe
with open(outputFile, "w") as f:
    f.write(recipe)

